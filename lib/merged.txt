Date: 2023-12-10 19:55:49

Root File Path: d:\INTERNSHIP\RIG group\task1\m_soko\lib
Directory Tree:
- lib/
    - firebase_options.dart
    - main.dart
    - authentication/
        - auth_services/
            - auth_exceptions.dart
            - auth_provider.dart
            - auth_service.dart
            - auth_user.dart
            - firebase_auth_provider.dart
            - bloc/
                - auth_bloc.dart
                - auth_event.dart
                - auth_state.dart
        - Views/
            - login_view.dart
            - onboarding_screen.dart
            - register_view.dart
    - common/
        - colors.dart
        - routes.dart
        - themes.dart
        - utilities/
            - dialogs/
            - generics/
    - home/
        - home_screen.dart
        - products/
            - products_bloc.dart
            - products_event.dart
            - products_page.dart
            - products_state.dart
        - properties/
        - services/
    - models/
        - product.dart
        - property.dart
        - service.dart
        - user.dart
    - navigation/
        - bottom_navigation_bar.dart
        - drawer_navigation.dart
        - top_navigation_bar.dart
    - widgets/
        - custom_widgets.dart
        - onboard_page.dart


--- ./firebase_options.dart ---
// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      throw UnsupportedError(
        'DefaultFirebaseOptions have not been configured for web - '
        'you can reconfigure this by running the FlutterFire CLI again.',
      );
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for ios - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'AIzaSyAzIWd1g-WhufGcQNk8dr2xEUlrdUe2hBw',
    appId: '1:1096043313286:android:d3487955634e177a853907',
    messagingSenderId: '1096043313286',
    projectId: 'm-soko-user',
    storageBucket: 'm-soko-user.appspot.com',
  );
}


--- ./main.dart ---
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:m_soko/authentication/Views/login_view.dart';
import 'package:m_soko/authentication/Views/onboarding_screen.dart';
import 'package:m_soko/authentication/Views/register_view.dart';
import 'package:m_soko/authentication/auth_services/bloc/auth_bloc.dart';
import 'package:m_soko/authentication/auth_services/bloc/auth_event.dart';
import 'package:m_soko/authentication/auth_services/bloc/auth_state.dart';
import 'package:m_soko/authentication/auth_services/firebase_auth_provider.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:m_soko/home/home_screen.dart';
import 'package:m_soko/widgets/onboard_page.dart';

void main() {
  WidgetsFlutterBinding.ensureInitialized();
  runApp(
    MaterialApp(
      // supportedLocales: AppLocalizations.supportedLocales,
      // localizationsDelegates: AppLocalizations.localizationsDelegates,
      title: 'Flutter Demo',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: BlocProvider<AuthBloc>(
        create: (context) => AuthBloc(FirebaseAuthProvider()),
        child: const HomePage(),
      ),
      routes: {
        // createOrUpdateNoteRoute: (context) => const CreateUpdateNoteView(),
      },
    ),
  );
}

class HomePage extends StatelessWidget {
  const HomePage({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    context.read<AuthBloc>().add(const AuthEventInitialize());
    return BlocConsumer<AuthBloc, AuthState>(
      listener: (context, state) {
        if (state.isLoading) {
          Fluttertoast.showToast(msg: 'Loading');
        } else {
          Fluttertoast.showToast(msg: 'Loaded');
        }
      },
      builder: (context, state) {
        if (state is AuthStateLoggedIn) {
          return const HomeScreen();
        }
        // else if (state is AuthStateNeedsVerification) {
        //   return const VerifyEmailView();
        // }
        else if (state is AuthStateLoggedOut) {
          return const LoginView();
        }
        // else if (state is AuthStateForgotPassword) {
        //   return const ForgotPasswordView();
        // }
        else if (state is AuthStateRegistering) {
          return const RegisterView();
        } else {
          return const Scaffold(
            body: CircularProgressIndicator(),
          );
        }
      },
    );
  }
}


--- authentication\auth_services/auth_exceptions.dart ---
// login exceptions
class UserNotFoundAuthException implements Exception {}

class WrongPasswordAuthException implements Exception {}

// register exceptions

class WeakPasswordAuthException implements Exception {}

class EmailAlreadyInUseAuthException implements Exception {}

class InvalidEmailAuthException implements Exception {}

// generic exceptions

class GenericAuthException implements Exception {}

class UserNotLoggedInAuthException implements Exception {}


--- authentication\auth_services/auth_provider.dart ---
import 'package:m_soko/authentication/auth_services/auth_user.dart';

abstract class AuthProvider {
  Future<void> initialize();
  AuthUser? get currentUser;
  Future<AuthUser> logIn({
    required String email,
    required String password,
  });
  Future<AuthUser> createUser({
    required String email,
    required String password,
  });
  Future<void> logOut();
  Future<void> sendEmailVerification();
  Future<void> sendPasswordReset({required String toEmail});
}


--- authentication\auth_services/auth_service.dart ---
import 'package:m_soko/authentication/auth_services/auth_provider.dart';
import 'package:m_soko/authentication/auth_services/auth_user.dart';
import 'package:m_soko/authentication/auth_services/firebase_auth_provider.dart';

class AuthService implements AuthProvider {
  final AuthProvider provider;
  const AuthService(this.provider);

  factory AuthService.firebase() => AuthService(FirebaseAuthProvider());

  @override
  Future<AuthUser> createUser({
    required String email,
    required String password,
  }) =>
      provider.createUser(
        email: email,
        password: password,
      );

  @override
  AuthUser? get currentUser => provider.currentUser;

  @override
  Future<AuthUser> logIn({
    required String email,
    required String password,
  }) =>
      provider.logIn(
        email: email,
        password: password,
      );

  @override
  Future<void> logOut() => provider.logOut();

  @override
  Future<void> sendEmailVerification() => provider.sendEmailVerification();

  @override
  Future<void> initialize() => provider.initialize();

  @override
  Future<void> sendPasswordReset({required String toEmail}) =>
      provider.sendPasswordReset(toEmail: toEmail);
}


--- authentication\auth_services/auth_user.dart ---
import 'package:firebase_auth/firebase_auth.dart' show User;
import 'package:flutter/foundation.dart';

@immutable
class AuthUser {
  final String id;
  final String email;
  final bool isEmailVerified;
  const AuthUser({
    required this.id,
    required this.email,
    required this.isEmailVerified,
  });

  factory AuthUser.fromFirebase(User user) => AuthUser(
        id: user.uid,
        email: user.email!,
        isEmailVerified: user.emailVerified,
      );
}


--- authentication\auth_services/firebase_auth_provider.dart ---
import 'package:firebase_core/firebase_core.dart';
import 'package:m_soko/authentication/auth_services/auth_exceptions.dart';
import 'package:m_soko/authentication/auth_services/auth_provider.dart';
import 'package:m_soko/authentication/auth_services/auth_user.dart';
import 'package:m_soko/firebase_options.dart';

import 'package:firebase_auth/firebase_auth.dart'
    show FirebaseAuth, FirebaseAuthException;

class FirebaseAuthProvider implements AuthProvider {
  @override
  Future<void> initialize() async {
    await Firebase.initializeApp(
      options: DefaultFirebaseOptions.currentPlatform,
    );
  }

  @override
  Future<AuthUser> createUser({
    required String email,
    required String password,
  }) async {
    try {
      await FirebaseAuth.instance.createUserWithEmailAndPassword(
        email: email,
        password: password,
      );
      final user = currentUser;
      if (user != null) {
        return user;
      } else {
        throw UserNotLoggedInAuthException();
      }
    } on FirebaseAuthException catch (e) {
      if (e.code == 'weak-password') {
        throw WeakPasswordAuthException();
      } else if (e.code == 'email-already-in-use') {
        throw EmailAlreadyInUseAuthException();
      } else if (e.code == 'invalid-email') {
        throw InvalidEmailAuthException();
      } else {
        throw GenericAuthException();
      }
    } catch (_) {
      throw GenericAuthException();
    }
  }

  @override
  AuthUser? get currentUser {
    final user = FirebaseAuth.instance.currentUser;
    if (user != null) {
      return AuthUser.fromFirebase(user);
    } else {
      return null;
    }
  }

  @override
  Future<AuthUser> logIn({
    required String email,
    required String password,
  }) async {
    try {
      await FirebaseAuth.instance.signInWithEmailAndPassword(
        email: email,
        password: password,
      );
      final user = currentUser;
      if (user != null) {
        return user;
      } else {
        throw UserNotLoggedInAuthException();
      }
    } on FirebaseAuthException catch (e) {
      if (e.code == 'user-not-found') {
        throw UserNotFoundAuthException();
      } else if (e.code == 'wrong-password') {
        throw WrongPasswordAuthException();
      } else {
        throw GenericAuthException();
      }
    } catch (_) {
      throw GenericAuthException();
    }
  }

  @override
  Future<void> logOut() async {
    final user = FirebaseAuth.instance.currentUser;
    if (user != null) {
      await FirebaseAuth.instance.signOut();
    } else {
      throw UserNotLoggedInAuthException();
    }
  }

  @override
  Future<void> sendEmailVerification() async {
    final user = FirebaseAuth.instance.currentUser;
    if (user != null) {
      await user.sendEmailVerification();
    } else {
      throw UserNotLoggedInAuthException();
    }
  }

  @override
  Future<void> sendPasswordReset({required String toEmail}) async {
    try {
      await FirebaseAuth.instance.sendPasswordResetEmail(email: toEmail);
    } on FirebaseAuthException catch (e) {
      switch (e.code) {
        case 'firebase_auth/invalid-email':
          throw InvalidEmailAuthException();
        case 'firebase_auth/user-not-found':
          throw UserNotFoundAuthException();
        default:
          throw GenericAuthException();
      }
    } catch (_) {
      throw GenericAuthException();
    }
  }
}


--- authentication\auth_services\bloc/auth_bloc.dart ---
import 'package:bloc/bloc.dart';
import 'package:m_soko/authentication/auth_services/auth_provider.dart';
import 'package:m_soko/authentication/auth_services/bloc/auth_event.dart';
import 'package:m_soko/authentication/auth_services/bloc/auth_state.dart';

class AuthBloc extends Bloc<AuthEvent, AuthState> {
  AuthBloc(AuthProvider provider)
      : super(const AuthStateUninitialized(isLoading: true)) {
    on<AuthEventShouldRegister>((event, emit) {
      emit(const AuthStateRegistering(
        exception: null,
        isLoading: false,
      ));
    });

    //forgot password
    on<AuthEventForgotPassword>((event, emit) async {
      emit(const AuthStateForgotPassword(
        exception: null,
        hasSentEmail: false,
        isLoading: false,
      ));
      final email = event.email;
      if (email == null) {
        return; // user just wants to go to forgot-password screen
      }

      // user wants to actually send a forgot-password email
      emit(const AuthStateForgotPassword(
        exception: null,
        hasSentEmail: false,
        isLoading: true,
      ));

      bool didSendEmail;
      Exception? exception;
      try {
        await provider.sendPasswordReset(toEmail: email);
        didSendEmail = true;
        exception = null;
      } on Exception catch (e) {
        didSendEmail = false;
        exception = e;
      }

      emit(AuthStateForgotPassword(
        exception: exception,
        hasSentEmail: didSendEmail,
        isLoading: false,
      ));
    });
    // send email verification
    on<AuthEventSendEmailVerification>((event, emit) async {
      await provider.sendEmailVerification();
      emit(state);
    });

    on<AuthEventRegister>((event, emit) async {
      final email = event.email;
      final password = event.password;
      try {
        await provider.createUser(
          email: email,
          password: password,
        );
        await provider.sendEmailVerification();
        emit(const AuthStateNeedsVerification(isLoading: false));
      } on Exception catch (e) {
        emit(AuthStateRegistering(
          exception: e,
          isLoading: false,
        ));
      }
    });

    // initialize
    on<AuthEventInitialize>((event, emit) async {
      await provider.initialize();
      final user = provider.currentUser;
      if (user == null) {
        emit(
          const AuthStateLoggedOut(
            exception: null,
            isLoading: false,
          ),
        );
      } else if (!user.isEmailVerified) {
        emit(const AuthStateNeedsVerification(isLoading: false));
      } else {
        emit(AuthStateLoggedIn(
          user: user,
          isLoading: false,
        ));
      }
    });

    // log in
    on<AuthEventLogIn>((event, emit) async {
      emit(
        const AuthStateLoggedOut(
          exception: null,
          isLoading: true,
          loadingText: 'Please wait while I log you in',
        ),
      );
      final email = event.email;
      final password = event.password;
      try {
        final user = await provider.logIn(
          email: email,
          password: password,
        );

        if (!user.isEmailVerified) {
          emit(
            const AuthStateLoggedOut(
              exception: null,
              isLoading: false,
            ),
          );
          emit(const AuthStateNeedsVerification(isLoading: false));
        } else {
          emit(
            const AuthStateLoggedOut(
              exception: null,
              isLoading: false,
            ),
          );
          emit(AuthStateLoggedIn(
            user: user,
            isLoading: false,
          ));
        }
      } on Exception catch (e) {
        emit(
          AuthStateLoggedOut(
            exception: e,
            isLoading: false,
          ),
        );
      }
    });

    // log out
    on<AuthEventLogOut>((event, emit) async {
      try {
        await provider.logOut();
        emit(
          const AuthStateLoggedOut(
            exception: null,
            isLoading: false,
          ),
        );
      } on Exception catch (e) {
        emit(
          AuthStateLoggedOut(
            exception: e,
            isLoading: false,
          ),
        );
      }
    });
  }
}


--- authentication\auth_services\bloc/auth_event.dart ---
import 'package:flutter/foundation.dart' show immutable;

@immutable
abstract class AuthEvent {
  const AuthEvent();
}

class AuthEventInitialize extends AuthEvent {
  const AuthEventInitialize();
}

class AuthEventSendEmailVerification extends AuthEvent {
  const AuthEventSendEmailVerification();
}

class AuthEventLogIn extends AuthEvent {
  final String email;
  final String password;
  const AuthEventLogIn(this.email, this.password);
}

class AuthEventRegister extends AuthEvent {
  final String email;
  final String password;
  const AuthEventRegister(this.email, this.password);
}

class AuthEventShouldRegister extends AuthEvent {
  const AuthEventShouldRegister();
}

class AuthEventForgotPassword extends AuthEvent {
  final String? email;
  const AuthEventForgotPassword({this.email});
}

class AuthEventLogOut extends AuthEvent {
  const AuthEventLogOut();
}


--- authentication\auth_services\bloc/auth_state.dart ---
import 'package:flutter/foundation.dart' show immutable;
import 'package:m_soko/authentication/auth_services/auth_user.dart';
import 'package:equatable/equatable.dart';

@immutable
abstract class AuthState {
  final bool isLoading;
  final String? loadingText;
  const AuthState({
    required this.isLoading,
    this.loadingText = 'Please wait a moment',
  });
}

class AuthStateUninitialized extends AuthState {
  const AuthStateUninitialized({required bool isLoading})
      : super(isLoading: isLoading);
}

class AuthStateRegistering extends AuthState {
  final Exception? exception;
  const AuthStateRegistering({
    required this.exception,
    required isLoading,
  }) : super(isLoading: isLoading);
}

class AuthStateForgotPassword extends AuthState {
  final Exception? exception;
  final bool hasSentEmail;
  const AuthStateForgotPassword({
    required this.exception,
    required this.hasSentEmail,
    required bool isLoading,
  }) : super(isLoading: isLoading);
}

class AuthStateLoggedIn extends AuthState {
  final AuthUser user;
  const AuthStateLoggedIn({
    required this.user,
    required bool isLoading,
  }) : super(isLoading: isLoading);
}

class AuthStateNeedsVerification extends AuthState {
  const AuthStateNeedsVerification({required bool isLoading})
      : super(isLoading: isLoading);
}

class AuthStateLoggedOut extends AuthState with EquatableMixin {
  final Exception? exception;
  const AuthStateLoggedOut({
    required this.exception,
    required bool isLoading,
    String? loadingText,
  }) : super(
          isLoading: isLoading,
          loadingText: loadingText,
        );

  @override
  List<Object?> get props => [exception, isLoading];
}


--- authentication\Views/login_view.dart ---
import 'package:flutter/material.dart';
import 'package:m_soko/authentication/Views/onboarding_screen.dart';
import 'package:m_soko/authentication/Views/register_view.dart';
import 'package:m_soko/authentication/auth_services/auth_exceptions.dart';
import 'package:m_soko/authentication/auth_services/bloc/auth_bloc.dart';
import 'package:m_soko/authentication/auth_services/bloc/auth_event.dart';
import 'package:m_soko/authentication/auth_services/bloc/auth_state.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:m_soko/common/colors.dart';

class LoginView extends StatefulWidget {
  const LoginView({super.key});

  @override
  State<LoginView> createState() => _LoginViewState();
}

class _LoginViewState extends State<LoginView> {
  late final TextEditingController _email;
  late final TextEditingController _password;
  bool isPasswordVisible = false;

  @override
  void initState() {
    _email = TextEditingController();
    _password = TextEditingController();
    super.initState();
  }

  @override
  void dispose() {
    _email.dispose();
    _password.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return BlocListener<AuthBloc, AuthState>(
      listener: (context, state) async {
        if (state is AuthStateLoggedOut) {
          if (state.exception is UserNotFoundAuthException) {
            Fluttertoast.showToast(msg: 'login_error_cannot_find_user');
          } else if (state.exception is WrongPasswordAuthException) {
            Fluttertoast.showToast(msg: 'login_error_wrong_credentials');
          } else if (state.exception is GenericAuthException) {
            Fluttertoast.showToast(msg: 'login_error_auth_error');
          }
        }
      },
      child: Scaffold(
        resizeToAvoidBottomInset: false,
        backgroundColor: Colors.white,
        body: Stack(
          children: [
            Image.asset('assets/auth_header.png'),
            Container(
              margin: const EdgeInsets.fromLTRB(30, 50, 0, 0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const SizedBox(height: 30),
                  const Text(
                    'Welcome to\nSokoni!',
                    style: TextStyle(
                      color: Colors.white,
                      fontSize: 40,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 5),
                  Container(
                    width: 35,
                    height: 8,
                    decoration: BoxDecoration(
                      color: ColorConstants.orange500,
                      borderRadius: BorderRadius.circular(30),
                    ),
                  ),
                ],
              ),
            ),
            Container(
              margin: const EdgeInsets.fromLTRB(30, 300, 30, 0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text(
                    'Email',
                    textAlign: TextAlign.right,
                  ),
                  TextField(
                    controller: _email,
                    decoration: const InputDecoration(
                      enabledBorder: OutlineInputBorder(),
                      border: OutlineInputBorder(),
                    ),
                  ),
                  const SizedBox(height: 16),
                  const Text('Password'),
                  TextField(
                    controller: _password,
                    obscureText: !isPasswordVisible,
                    decoration: InputDecoration(
                      enabledBorder: const OutlineInputBorder(),
                      border: const OutlineInputBorder(),
                      suffixIcon: IconButton(
                        icon: Icon(
                          isPasswordVisible
                              ? Icons.visibility
                              : Icons.visibility_off,
                        ),
                        onPressed: () {
                          setState(() {
                            isPasswordVisible = !isPasswordVisible;
                          });
                        },
                      ),
                    ),
                  ),
                  const SizedBox(height: 16),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Expanded(
                        child: Container(
                          height: 1,
                          color: Colors.grey,
                        ),
                      ),
                      const Padding(
                        padding: EdgeInsets.symmetric(horizontal: 8),
                        child: Text('or'),
                      ),
                      Expanded(
                        child: Container(
                          height: 1,
                          color: Colors.grey,
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 16),
                  const Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Icon(Icons.person),
                      SizedBox(width: 16),
                      Icon(Icons.person),
                    ],
                  ),
                  const SizedBox(height: 16),
                  Column(
                    crossAxisAlignment: CrossAxisAlignment.center,
                    children: [
                      Row(
                        children: [
                          Expanded(
                            child: TextButton(
                              style: ButtonStyle(
                                backgroundColor: MaterialStateProperty.all(
                                    ColorConstants.blue700),
                                shape: MaterialStateProperty.all<
                                    RoundedRectangleBorder>(
                                  RoundedRectangleBorder(
                                    borderRadius: BorderRadius.circular(10),
                                  ),
                                ),
                              ),
                              onPressed: () async {
                                // Fluttertoast.showToast(msg: 'btn pressed');
                                final email = _email.text;
                                final password = _password.text;
                                context.read<AuthBloc>().add(
                                      AuthEventLogIn(
                                        email,
                                        password,
                                      ),
                                    );
                              },
                              child: Container(
                                height: 40,
                                child: const Center(
                                  child: Text(
                                    'Login',
                                    style: TextStyle(
                                        color: Colors.white, fontSize: 25),
                                  ),
                                ),
                              ),
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 16),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          const Text('New Here?'),
                          SizedBox(
                            width: 10,
                          ),
                          TextButton(
                            onPressed: () {
                              Fluttertoast.showToast(
                                msg: 'Register Screen',
                              );
                              context.read<AuthBloc>().add(
                                    const AuthEventShouldRegister(),
                                  );
                            },
                            style: ButtonStyle(
                              side: MaterialStateProperty.all(
                                const BorderSide(
                                  color: Colors.blue,
                                  width: 2.0,
                                ),
                              ),
                              shape: MaterialStateProperty.all(
                                RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(
                                      0), // Set the radius to 0
                                ),
                              ),
                            ),
                            child: const Text('Register'),
                          ),
                        ],
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}


--- authentication\Views/onboarding_screen.dart ---
import 'package:flutter/material.dart';
import 'package:m_soko/widgets/onboard_page.dart';

class OnboardingScreen extends StatefulWidget {
  const OnboardingScreen({super.key});

  @override
  OnboardingScreenState createState() => OnboardingScreenState();
}

class OnboardingScreenState extends State<OnboardingScreen> {
  final String demoText =
      'Lorem ipsum dolor sit amet consectetur adipisicing elit.';
  final PageController controller = PageController(initialPage: 0);
  int pageIndex = 0;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFF08215E),
      body: Stack(
        alignment: Alignment.center,
        children: [
          PageView(
            controller: controller,
            onPageChanged: (value) {
              setState(() {
                pageIndex = value;
              });
            },
            children: [
              OnboardPage(
                controller: controller,
                pageIndex: 0,
                imageUrl: 'assets/auth/onboard1.png',
                desc1: demoText,
                desc2: demoText,
                desc3: demoText,
              ),
              OnboardPage(
                controller: controller,
                pageIndex: 1,
                imageUrl: 'assets/auth/onboard2.png',
                desc1: demoText,
                desc2: demoText,
                desc3: demoText,
              ),
              OnboardPage(
                controller: controller,
                pageIndex: 2,
                imageUrl: 'assets/auth/onboard3.png',
                desc1: demoText,
                desc2: demoText,
                desc3: demoText,
              ),
            ],
          ),
        ],
      ),
    );
  }
}


--- authentication\Views/register_view.dart ---
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:m_soko/authentication/auth_services/auth_exceptions.dart';
import 'package:m_soko/authentication/auth_services/bloc/auth_bloc.dart';
import 'package:m_soko/authentication/auth_services/bloc/auth_event.dart';
import 'package:m_soko/authentication/auth_services/bloc/auth_state.dart';

class RegisterView extends StatefulWidget {
  const RegisterView({Key? key}) : super(key: key);

  @override
  _RegisterViewState createState() => _RegisterViewState();
}

class _RegisterViewState extends State<RegisterView> {
  late final TextEditingController _email;
  late final TextEditingController _password;

  @override
  void initState() {
    _email = TextEditingController();
    _password = TextEditingController();
    super.initState();
  }

  @override
  void dispose() {
    _email.dispose();
    _password.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return BlocListener<AuthBloc, AuthState>(
      listener: (context, state) async {
        if (state is AuthStateRegistering) {
          if (state.exception is WeakPasswordAuthException) {
            Fluttertoast.showToast(msg: 'register_error_weak_password');
          } else if (state.exception is EmailAlreadyInUseAuthException) {
            Fluttertoast.showToast(msg: 'register_error_email_already_in_use');
          } else if (state.exception is GenericAuthException) {
            Fluttertoast.showToast(msg: 'register_error_generic');
          } else if (state.exception is InvalidEmailAuthException) {
            Fluttertoast.showToast(msg: 'register_error_invalid_email');
          }
        }
      },
      child: Scaffold(
        appBar: AppBar(
          title: Text('register'),
        ),
        body: Padding(
          padding: const EdgeInsets.all(16.0),
          child: SingleChildScrollView(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text('register_view_prompt'),
                TextField(
                  controller: _email,
                  enableSuggestions: false,
                  autocorrect: false,
                  autofocus: true,
                  keyboardType: TextInputType.emailAddress,
                  decoration: InputDecoration(
                    hintText: 'email_text_field_placeholder',
                  ),
                ),
                TextField(
                  controller: _password,
                  obscureText: true,
                  enableSuggestions: false,
                  autocorrect: false,
                  decoration: InputDecoration(
                    hintText: 'password_text_field_placeholder',
                  ),
                ),
                Center(
                  child: Column(
                    children: [
                      TextButton(
                        onPressed: () async {
                          final email = _email.text;
                          final password = _password.text;
                          context.read<AuthBloc>().add(
                                AuthEventRegister(
                                  email,
                                  password,
                                ),
                              );
                        },
                        child: Text(
                          'register',
                        ),
                      ),
                      TextButton(
                        onPressed: () {
                          context.read<AuthBloc>().add(
                                const AuthEventLogOut(),
                              );
                        },
                        child: Text(
                          'register_view_already_registered',
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}


--- common/colors.dart ---
import 'package:flutter/material.dart';

class ColorConstants {
  // Define blue shades
  static const Color blue50 = Color(0xFFE7EAF3);
  static const Color blue100 = Color(0xFFB3BFD9);
  static const Color blue200 = Color(0xFF819FC6);
  static const Color blue300 = Color(0xFF5C74AD);
  static const Color blue400 = Color(0xFF3C599D);
  static const Color blue500 = Color(0xFF062184);
  static const Color blue600 = Color(0xFF002B78);
  static const Color blue700 = Color(0xFF08215A);
  static const Color blue800 = Color(0xFF061A49);
  static const Color blue900 = Color(0xFF051437);

  // Define yellow shades
  static const Color yellow50 = Color(0xFFFBF8E7);
  static const Color yellow100 = Color(0xFFF4E9B3);
  static const Color yellow200 = Color(0xFFEEDF8F);
  static const Color yellow300 = Color(0xFFE6CF5C);
  static const Color yellow400 = Color(0xFFE1C63C);
  static const Color yellow500 = Color(0xFFDAB80B);
  static const Color yellow600 = Color(0xFFC6A70A);
  static const Color yellow700 = Color(0xFF9B8308);
  static const Color yellow800 = Color(0xFF786506);
  static const Color yellow900 = Color(0xFF5C4D05);

  // Define green shades
  static const Color green50 = Color(0xFFECFDE7);
  static const Color green100 = Color(0xFFC4F8B5);
  static const Color green200 = Color(0xFFA7F492);
  static const Color green300 = Color(0xFF7FF060);
  static const Color green400 = Color(0xFF66ED41);
  static const Color green500 = Color(0xFF40E811);
  static const Color green600 = Color(0xFF3AD30F);
  static const Color green700 = Color(0xFF2DA50C);
  static const Color green800 = Color(0xFF238009);
  static const Color green900 = Color(0xFF1B6107);

  // Define orange shades
  static const Color orange50 = Color(0xFFFEF2E6);
  static const Color orange100 = Color(0xFFFAD8B0);
  static const Color orange200 = Color(0xFFF8C58A);
  static const Color orange300 = Color(0xFFF5AA54);
  static const Color orange400 = Color(0xFFF39933);
  static const Color orange500 = Color(0xFFF08000);
  static const Color orange600 = Color(0xFFDA7400);
  static const Color orange700 = Color(0xFFA05000);
  static const Color orange800 = Color(0xFF844600);
  static const Color orange900 = Color(0xFF653600);
}


--- common/routes.dart ---



--- common/themes.dart ---
import 'package:flutter/material.dart';

ThemeData productService1Theme = ThemeData(
  primaryColor: Colors.blue, // Adjust colors based on your needs
  colorScheme: ColorScheme.fromSwatch().copyWith(secondary: Colors.blue),
  // Other theme configurations...
);

ThemeData productService2Theme = ThemeData(
  primaryColor: Colors.green,
  colorScheme: ColorScheme.fromSwatch().copyWith(secondary: Colors.green),
  // Other theme configurations...
);

ThemeData productService3Theme = ThemeData(
  primaryColor: Colors.orange,
  colorScheme: ColorScheme.fromSwatch().copyWith(secondary: Colors.orange),
  // Other theme configurations...
);


--- home/home_screen.dart ---
import 'package:flutter/material.dart';

class HomeScreen extends StatelessWidget {
  const HomeScreen({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Home'),
      ),
      body: const Center(
        child: Text('Welcome to the Home Screen!'),
      ),
    );
  }
}


--- home\products/products_bloc.dart ---
// Your Dart code goes here

--- home\products/products_event.dart ---
// Your Dart code goes here

--- home\products/products_page.dart ---
// Your Dart code goes here

--- home\products/products_state.dart ---
// Your Dart code goes here

--- models/product.dart ---
// Your Dart code goes here

--- models/property.dart ---
// Your Dart code goes here

--- models/service.dart ---
// Your Dart code goes here

--- models/user.dart ---
// Your Dart code goes here

--- navigation/bottom_navigation_bar.dart ---
// Your Dart code goes here

--- navigation/drawer_navigation.dart ---
// Your Dart code goes here

--- navigation/top_navigation_bar.dart ---
// Your Dart code goes here

--- widgets/custom_widgets.dart ---
// Your Dart code goes here

--- widgets/onboard_page.dart ---
import 'package:flutter/material.dart';
import 'package:m_soko/authentication/Views/login_view.dart';

import 'package:m_soko/common/colors.dart';

class OnboardPage extends StatelessWidget {
  final PageController controller;
  final int pageIndex;
  final String imageUrl;
  final String desc1;
  final String desc2;
  final String desc3;

  const OnboardPage({
    super.key,
    required this.controller,
    required this.pageIndex,
    required this.imageUrl,
    required this.desc1,
    required this.desc2,
    required this.desc3,
  });

  @override
  Widget build(BuildContext context) {
    return Column(
      mainAxisAlignment: MainAxisAlignment.start,
      children: [
        const SizedBox(height: 24),
        Image.asset(imageUrl),
        const SizedBox(height: 10),
        Container(
          margin: const EdgeInsets.symmetric(horizontal: 5),
          padding: const EdgeInsets.symmetric(horizontal: 10),
          child: Column(
            children: [
              _buildListItem(desc1),
              _buildListItem(desc2),
              _buildListItem(desc3),
            ],
          ),
        ),
        const SizedBox(height: 10),
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 40),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.end,
            children: [
              GestureDetector(
                onTap: () {
                  pageIndex == 2
                      ? Navigator.of(context).push(
                          MaterialPageRoute(
                            builder: (context) {
                              return const LoginView();
                            },
                          ),
                        )
                      : controller.animateToPage(pageIndex + 1,
                          duration: const Duration(milliseconds: 500),
                          curve: Curves.decelerate);
                },
                child: Container(
                  width: 150,
                  height: 50,
                  alignment: Alignment.center,
                  decoration: BoxDecoration(
                    color: ColorConstants.orange500,
                    borderRadius: BorderRadius.circular(30),
                  ),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Text(
                        pageIndex == 2 ? 'Get Started' : 'Next',
                        style: const TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                          color: Colors.white,
                        ),
                      ),
                      const SizedBox(width: 10),
                      const Icon(
                        Icons.arrow_forward_sharp,
                        color: Colors.white,
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        )
      ],
    );
  }

  Widget _buildListItem(String desc) {
    return Container(
      margin: const EdgeInsets.only(top: 8),
      child: Row(
        children: [
          const Icon(
            Icons.check_circle_rounded,
            color: Colors.green,
          ),
          const SizedBox(width: 6),
          Expanded(
            child: Text(
              desc,
              textAlign: TextAlign.start,
              style: const TextStyle(
                color: Colors.white,
              ),
              softWrap: true,
            ),
          ),
        ],
      ),
    );
  }
}


